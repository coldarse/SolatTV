{"ast":null,"code":"import { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SolatService {\n  constructor(http) {\n    this.http = http;\n  }\n  handleError(error) {\n    if (error.error instanceof ErrorEvent) {\n      console.error('An error occurred:', error.error.message);\n    } else {\n      console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n    }\n    return throwError(error);\n  }\n}\nSolatService.ɵfac = function SolatService_Factory(t) {\n  return new (t || SolatService)(i0.ɵɵinject(i1.HttpClient));\n};\nSolatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SolatService,\n  factory: SolatService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["throwError","SolatService","constructor","http","handleError","error","ErrorEvent","console","message","status","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/danny/Documents/GitHub/SolatTV/src/app/solat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse} from '@angular/common/http'; \nimport { throwError, of as _observableOf, throwError as _observableThrow } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SolatService {\n\n  constructor(\n    private http: HttpClient,\n  ) { }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      console.error('An error occurred:', error.error.message);\n    } \n    else {\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    return throwError(\n      error);\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,QAA6D,MAAM;;;AAMtF,OAAM,MAAOC,YAAY;EAEvBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EACV;EAEIC,WAAWA,CAACC,KAAwB;IAC1C,IAAIA,KAAK,CAACA,KAAK,YAAYC,UAAU,EAAE;MACrCC,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAACG,OAAO,CAAC;KACzD,MACI;MACHD,OAAO,CAACF,KAAK,CACX,yBAAyBA,KAAK,CAACI,MAAM,IAAI,GACzC,aAAaJ,KAAK,CAACA,KAAK,EAAE,CAAC;;IAE/B,OAAOL,UAAU,CACfK,KAAK,CAAC;EACV;;AAjBWJ,YAAY,C;mBAAZA,YAAY,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAZZ,YAAY,C;SAAZA,YAAY;EAAAa,OAAA,EAAZb,YAAY,CAAAc,IAAA;EAAAC,UAAA,EAHX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}