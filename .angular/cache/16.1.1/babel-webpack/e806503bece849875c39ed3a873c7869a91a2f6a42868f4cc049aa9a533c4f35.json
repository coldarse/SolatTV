{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { formatDate } from '@angular/common';\nimport { appFunc } from '../_models/appFunc';\nexport let FooterComponent = class FooterComponent {\n  constructor(scrollingtextService) {\n    this.scrollingtextService = scrollingtextService;\n    this.template = 1;\n    this.periods = [{\n      period: '',\n      time: '',\n      order: 0\n    }, {\n      period: '',\n      time: '',\n      order: 0\n    }, {\n      period: '',\n      time: '',\n      order: 0\n    }, {\n      period: '',\n      time: '',\n      order: 0\n    }, {\n      period: '',\n      time: '',\n      order: 0\n    }, {\n      period: '',\n      time: '',\n      order: 0\n    }, {\n      period: '',\n      time: '',\n      order: 0\n    }];\n    //Call API in this component\n    this.scrolling_texts = [{\n      text: 'Sebaik-baik manusia adalah orang yang belajar Al-Qur\\'an & mengajarkannya1.',\n      order: 0\n    }, {\n      text: 'Sebaik-baik manusia adalah orang yang belajar Al-Qur\\'an & mengajarkannya2.',\n      order: 2\n    }, {\n      text: 'Sebaik-baik manusia adalah orang yang belajar Al-Qur\\'an & mengajarkannya3.',\n      order: 1\n    }];\n    this.current_text = '';\n    this.next_prayer_countdown = '';\n    this.next_event_countdown_in_days = '';\n    this.counter = 0;\n  }\n  ngOnDestroy() {\n    clearInterval(this.text_interval);\n    clearInterval(this.time_interval);\n  }\n  ngOnInit() {\n    this.periods = appFunc.sortArr(this.periods);\n    this.time_interval = setInterval(() => {\n      for (let period of this.periods) {\n        //Get Current Date\n        let datetimenow = new Date();\n        //Format Current Date \n        let datetimenow_formatted = formatDate(Date.now(), 'dd/MM/yyyy HH:mm:ss', 'en');\n        //Get Date Part of Current Date \n        let [dateComponents] = datetimenow_formatted.split(' ');\n        //Get Components of Date part of Current Date\n        let [day, month, year] = dateComponents.split('/');\n        //Get Time Components from Period Time\n        let [hours, minutes] = period.time.split(':');\n        //Create a new Date Object using current Date and Period Time\n        let period_time = new Date(+year, +month - 1, +day, +hours, +minutes);\n        //Check if is Isyak to add additional day to new Date Object\n        if (period.period == 'Isyak') period_time.setDate(period_time.getDate() + 1);\n        //Get date difference in milliseconds to check for upcoming prayer time.\n        let dateDiff = datetimenow.getTime() - period_time.getTime();\n        //Check if date difference is a negative number, meaning is nearest upcoming\n        if (dateDiff < 0) {\n          //Convert milliseconds to time difference, must first convert to positive number to work correctly\n          this.next_prayer_countdown = period.period + ' -' + appFunc.convertMsToTime(Math.abs(dateDiff));\n          break;\n        }\n      }\n      ;\n    }, 1000);\n    //Sorting based on order\n    this.scrolling_texts = appFunc.sortArr(this.scrolling_texts);\n    this.textCycle();\n    this.text_interval = setInterval(() => {\n      this.textCycle();\n    }, 15000);\n  }\n  textCycle() {\n    this.current_text = this.scrolling_texts[this.counter].text;\n    if (this.counter == this.scrolling_texts.length - 1) {\n      this.counter = -1;\n    }\n    this.counter++;\n  }\n};\n__decorate([Input()], FooterComponent.prototype, \"template\", void 0);\n__decorate([Input()], FooterComponent.prototype, \"periods\", void 0);\nFooterComponent = __decorate([Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})], FooterComponent);","map":{"version":3,"names":["Component","Input","formatDate","appFunc","FooterComponent","constructor","scrollingtextService","template","periods","period","time","order","scrolling_texts","text","current_text","next_prayer_countdown","next_event_countdown_in_days","counter","ngOnDestroy","clearInterval","text_interval","time_interval","ngOnInit","sortArr","setInterval","datetimenow","Date","datetimenow_formatted","now","dateComponents","split","day","month","year","hours","minutes","period_time","setDate","getDate","dateDiff","getTime","convertMsToTime","Math","abs","textCycle","length","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/danny/Documents/GitHub/SolatTV/src/app/footer/footer.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { formatDate } from '@angular/common';\nimport { appFunc } from '../_models/appFunc';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  @Input() template: number = 1;\n\n  @Input() periods = [\n    {\n      period: '',\n      time: '',\n      order: 0,\n    },\n    {\n      period: '',\n      time: '',\n      order: 0,\n    },\n    {\n      period: '',\n      time: '',\n      order: 0,\n    },\n    {\n      period: '',\n      time: '',\n      order: 0,\n    },\n    {\n      period: '',\n      time: '',\n      order: 0,\n    },\n    {\n      period: '',\n      time: '',\n      order: 0,\n    },\n    {\n      period: '',\n      time: '',\n      order: 0,\n    },\n  ]\n\n  //Call API in this component\n  scrolling_texts = [\n    {\n      text: 'Sebaik-baik manusia adalah orang yang belajar Al-Qur\\'an & mengajarkannya1.',\n      order: 0\n    },\n    {\n      text: 'Sebaik-baik manusia adalah orang yang belajar Al-Qur\\'an & mengajarkannya2.',\n      order: 2\n    },\n    {\n      text: 'Sebaik-baik manusia adalah orang yang belajar Al-Qur\\'an & mengajarkannya3.',\n      order: 1\n    }\n  ]\n\n  current_text = '';\n\n  next_prayer_countdown = '';\n\n  next_event_countdown_in_days = '';\n  \n  text_interval: any;\n\n  time_interval: any;\n\n  counter = 0;\n\n  constructor(\n    private scrollingtextService: Scro\n  ){}\n\n  ngOnDestroy(): void{\n    clearInterval(this.text_interval);\n    clearInterval(this.time_interval);\n  }\n\n  ngOnInit(): void {\n\n    this.periods = appFunc.sortArr(this.periods);\n\n    this.time_interval = setInterval(() => {\n\n      for(let period of this.periods){\n        //Get Current Date\n        let datetimenow = new Date();\n        //Format Current Date \n        let datetimenow_formatted = formatDate(Date.now(), 'dd/MM/yyyy HH:mm:ss', 'en');\n        //Get Date Part of Current Date \n        let [dateComponents] = datetimenow_formatted.split(' ');\n        //Get Components of Date part of Current Date\n        let [day, month, year] = dateComponents.split('/');\n        //Get Time Components from Period Time\n        let [hours, minutes] = period.time.split(':');\n        //Create a new Date Object using current Date and Period Time\n        let period_time = new Date(+year, +month - 1, +day, +hours, +minutes);\n        //Check if is Isyak to add additional day to new Date Object\n        if(period.period == 'Isyak') period_time.setDate(period_time.getDate() + 1);\n        //Get date difference in milliseconds to check for upcoming prayer time.\n        let dateDiff = datetimenow.getTime() - period_time.getTime();\n        //Check if date difference is a negative number, meaning is nearest upcoming\n        if(dateDiff < 0){\n          //Convert milliseconds to time difference, must first convert to positive number to work correctly\n          this.next_prayer_countdown = period.period + ' -' + appFunc.convertMsToTime(Math.abs(dateDiff));\n          break;\n        }\n      };\n    }, 1000);\n    \n\n    //Sorting based on order\n    this.scrolling_texts = appFunc.sortArr(this.scrolling_texts);\n\n    this.textCycle();\n    this.text_interval = setInterval(() => {\n      this.textCycle();\n    }, 15000);\n  }\n\n  textCycle() {\n    this.current_text = this.scrolling_texts[this.counter].text;\n    if (this.counter == this.scrolling_texts.length - 1) {\n      this.counter = -1;\n    }\n    this.counter++;\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}