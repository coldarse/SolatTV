{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class appFunc {\n  static obj_cycle(counter, obj_arr, obj) {\n    obj = obj_arr[counter].val;\n    if (counter == obj_arr.length - 1) counter = -1;\n    counter++;\n    return [counter, obj];\n  }\n  static sortArr(obj_arr) {\n    obj_arr.sort((a, b) => a.order - b.order);\n    return obj_arr;\n  }\n  static padTo2Digits(num) {\n    return num.toString().padStart(2, '0');\n  }\n  static convertMsToTime(milliseconds) {\n    let seconds = Math.floor(milliseconds / 1000);\n    let minutes = Math.floor(seconds / 60);\n    let hours = Math.floor(minutes / 60);\n    seconds = seconds % 60;\n    minutes = minutes % 60;\n    hours = hours % 24;\n    return `${this.padTo2Digits(hours)}:${this.padTo2Digits}`;\n  }\n}\nappFunc.ɵfac = function appFunc_Factory(t) {\n  return new (t || appFunc)();\n};\nappFunc.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: appFunc,\n  factory: appFunc.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["appFunc","obj_cycle","counter","obj_arr","obj","val","length","sortArr","sort","a","b","order","padTo2Digits","num","toString","padStart","convertMsToTime","milliseconds","seconds","Math","floor","minutes","hours","factory","ɵfac","providedIn"],"sources":["/Users/danny/Documents/GitHub/SolatTV/src/app/_models/appFunc.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\n\n@Injectable({\n    providedIn: 'root',\n})\n\nexport class appFunc {\n    static obj_cycle(counter: number, obj_arr: any[], obj: string){\n        obj = obj_arr[counter].val;\n        if(counter == obj_arr.length - 1) counter = -1;\n        counter++;\n\n        return [counter, obj];\n    }\n\n    static sortArr(obj_arr: any[]) : any[]{\n        obj_arr.sort((a, b) => a.order - b.order);\n        return obj_arr;\n    }\n\n    static padTo2Digits(num: number){\n        return num.toString().padStart(2, '0');\n    }\n\n    static convertMsToTime(milliseconds: number){\n        let seconds = Math.floor(milliseconds / 1000);\n        let minutes = Math.floor(seconds / 60);\n        let hours = Math.floor(minutes / 60);\n\n        seconds = seconds % 60;\n        minutes = minutes % 60;\n\n        hours = hours % 24;\n\n        return `${this.padTo2Digits(hours)}:${this.padTo2Digits}`\n    }\n}"],"mappings":";AAMA,OAAM,MAAOA,OAAO;EAChB,OAAOC,SAASA,CAACC,OAAe,EAAEC,OAAc,EAAEC,GAAW;IACzDA,GAAG,GAAGD,OAAO,CAACD,OAAO,CAAC,CAACG,GAAG;IAC1B,IAAGH,OAAO,IAAIC,OAAO,CAACG,MAAM,GAAG,CAAC,EAAEJ,OAAO,GAAG,CAAC,CAAC;IAC9CA,OAAO,EAAE;IAET,OAAO,CAACA,OAAO,EAAEE,GAAG,CAAC;EACzB;EAEA,OAAOG,OAAOA,CAACJ,OAAc;IACzBA,OAAO,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,KAAK,GAAGD,CAAC,CAACC,KAAK,CAAC;IACzC,OAAOR,OAAO;EAClB;EAEA,OAAOS,YAAYA,CAACC,GAAW;IAC3B,OAAOA,GAAG,CAACC,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC1C;EAEA,OAAOC,eAAeA,CAACC,YAAoB;IACvC,IAAIC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,GAAG,IAAI,CAAC;IAC7C,IAAII,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACF,OAAO,GAAG,EAAE,CAAC;IACtC,IAAII,KAAK,GAAGH,IAAI,CAACC,KAAK,CAACC,OAAO,GAAG,EAAE,CAAC;IAEpCH,OAAO,GAAGA,OAAO,GAAG,EAAE;IACtBG,OAAO,GAAGA,OAAO,GAAG,EAAE;IAEtBC,KAAK,GAAGA,KAAK,GAAG,EAAE;IAElB,OAAO,GAAG,IAAI,CAACV,YAAY,CAACU,KAAK,CAAC,IAAI,IAAI,CAACV,YAAY,EAAE;EAC7D;;AA7BSZ,OAAO,C;mBAAPA,OAAO;AAAA;AAAPA,OAAO,C;SAAPA,OAAO;EAAAuB,OAAA,EAAPvB,OAAO,CAAAwB,IAAA;EAAAC,UAAA,EAHJ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}